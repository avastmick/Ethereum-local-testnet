#!/bin/bash

# Sets up a local private Ethereum testnet - this should be good for any unix install with bash

# Config variables - change these if you are hung up on ports etc
# networkid - DON'T CHANGE to values < 10...
networkid=9191
# node_id - to differentiate between configured nodes within a private network cluster
node_id=0
# IPC port
ipc_port=30801
# RPC port
rpc_port=8901
# data_dir
data_dir=/tmp/$networkid
# conf
conf=./conf
# pid for this node
pid_file=""
# Create a master, generic password - note this a private, testnet, so don't sweat too much here
password=testpwd-01

# Help
function usage {
    echo Usage:
    echo    testnet [param]
    echo params:
    echo    --create [node_id]: Creates a new testnet node. If within a cluster pass in a unique node_id - default is 0
    echo    --addacc [node_id] : Creates a account on the node. The first account is the coinbase account.
    echo    --unlockacc [account_no] [node_id] : Unlocks the account given TODO
    echo    --start [node_id] : Starts the local test node
    echo    --stop [node_id] : Stops the local test node
    echo    --attach [node_id] : attaches to a running node
    echo    --minestart [node_id] : starts the miner
    echo    --minestop [node_id] : stops the miner
    echo    --cluster : links all local nodes into a cluster TODO
    echo    --clean [node_id] : Removes the node data
    echo    --cleanall : Cleans the whole shebang
    echo    --help -h : This message
}
# Install Ethereum
function install-steps {
    if [[ $OSTYPE == darwin* ]]; then
        echo You\'re on a Mac, you can install using:
        echo "brew tap ethereum/ethereum &&"
        echo "brew install ethereum"
    elif [[ $OSTYPE == linux-gnu ]]; then
        echo You\'re on a Ubuntu variant, you can install using:
        echo "  sudo add-apt-repository ppa:ethereum/ethereum-qt &&"
        echo "  sudo add-apt-repository ppa:ethereum/ethereum &&"
        echo "  sudo add-apt-repository ppa:ethereum/ethereum-dev &&"
        echo "  sudo apt-get update &&"
        echo "  sudo apt-get install cpp-ethereum &&"
        echo "  sudo apt-get install ethereum"
    else # This is not supported
        echo Sorry, check the Ethereum docs for your Operating system
    fi
    exit
}
function checkEthereum {

    if [ hash geth >/dev/null 2>&1 || hash eth >/dev/null 2>&1 ]; then
        echo No current installation of Ethereum
        install-steps
    else
        echo Already installed Ethereum, nice! Proceeding...
    fi
}
# Configure
function configure {
    # Create the required directories and files if not there
    if [ "$(ls -A $conf 2>/dev/null)" ]; then
        echo Conf dir $conf already exists, not creating
    else
        echo Creating the local conf directory and files to configure node
        mkdir $conf
        genesis_block='{
            "nonce": "0x0000000000000042",
            "mixhash": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "difficulty": "0x4000",
            "alloc": {},
            "coinbase": "0x0000000000000000000000000000000000000000",
            "timestamp": "0x00",
            "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "extraData": "Custom Ethereum Genesis Block for initiating a local test net",
            "gasLimit": "0xffffffff"
        }'
        echo $genesis_block > $conf/genesis_block.json
        echo $password > conf/testnet-pwd
    fi
    if [ "$(ls -A $data_dir 2>/dev/null)" ]; then
        echo $data_dir already exists, not creating.
        echo If you want to re-create, run $0 --clean [node_id]
    else
        echo Creating the node data_dir at $data_dir
        mkdir -p $data_dir
    fi
}
# Init function to set up variables etc according to the inputs the user puts in. Used in ALL cases
function init {
    if [ -z "$1" ]; then
        echo No node_id passed in, using default - $node_id;
    else
        let node_id=$1
        echo Node_id used: $node_id
    fi
    data_dir=$data_dir/$node_id
    pid_file=$data_dir/pid-file
    let ipc_port=$ipc_port+$node_id
    let rpc_port=$rpc_port+$node_id
}
# Create
function create {
    init $1
    echo Checking that Ethereum is installed
    checkEthereum
    configure
    echo Starting node: $node_id, with ipc port: $ipc_port and rpc port: $rpc_port at data dir: $data_dir
    
    start "override"
}
# Start node
function start {
    if [ "$1" != "override" ]; then
        init $1
    fi
    echo Starting local testnet node: $node_id...

    geth --genesis $conf/genesis_block.json --datadir $data_dir --networkid $networkid --port $ipc_port --rpcport $rpc_port --nodiscover 2>> $data_dir/eth.log & echo $! >> $pid_file
    echo Done. Geth should now be running with pid: $(more $pid_file). See $data_dir/eth.log for details
}
# Stop node
function stop {
    init $1
    echo Stopping node...
    if [ -n "$(more $pid_file)" ]; then
        kill -HUP $(more $pid_file)
        echo ...done.
    fi
}
# Attach
function attach {
    init $1
    echo attaching to ipc endpoint $data_dir/geth.ipc
    geth attach ipc:$data_dir/geth.ipc
}
# Add account
function addacc {
    init $1
    echo Adding account...
    geth --datadir $data_dir --networkid $networkid --port $ipc_port --rpcport $rpc_port --password $conf/testnet-pwd account new
}
# Starts the miner on the designated node
function startmining {
    init $1
    echo starting the miner on this node: $networkid:$ipc_port
    echo NOT IMPLEMENTED
}
# Stop the miner on the designated node
function stopmining {
    init $1
    echo stopping the miner on this node: $networkid:$ipc_port
    echo NOT IMPLEMENTED
}
# Unlock account
function unlockacc {
    init $1
    if [ -z "$2" ]; then
        echo No account passed in, exiting;
        exit
    else
        echo unlocking $2
        echo NOT IMPLEMENTED
        # May cycle here - stop the current version of geth, unlock, restart... blurgh...
        # geth --password ./conf/testnet-pwd --unlock $2  --networkid 1973 --port 30801 --rpcport 8901
    fi
}
# Cluster the known nodes
function cluster {
    echo NOT IMPLEMENTED
}
# Clean
function clean {
    init $1
    echo Cleaning $data_dir...
    rm -rf $data_dir
    echo ...done.
}
# Clean all - complete removal of cluster
function cleanall {
    echo Complete clean of $data_dir...
    rm -rf $data_dir
    echo ...done.
}

if [ -z "$1" ]; then
    usage
    exit
fi
if [[ "$1" == "--create" ]]; then
    create $2;
elif [[ "$1" == "--addacc" ]]; then
    addacc $2;
elif [[ "$1" == "--unlockacc" ]]; then
    unlockacc $2;
elif [[ "$1" == "--start" ]]; then
    start $2;
elif [[ "$1" == "--stop" ]]; then
    stop $2;
elif [[ "$1" == "--attach" ]]; then
    attach $2;
elif [[ "$1" == "--minestart" ]]; then
    startmining $2;
elif [[ "$1" == "--minestop" ]]; then
    stopmining $2;
elif [[ "$1" == "--cluster" ]]; then
    cluster;
elif [[ "$1" == "--clean" ]]; then
    clean $2;
elif [[ "$1" == "--cleanall" ]]; then
    cleanall;
elif [[ "$1" == "--help" ]]; then
    usage;
elif [[ "$1" == "-h" ]]; then
    usage;
else
        echo Unknown command.
        usage
        exit
fi
