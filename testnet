#!/bin/bash

# Sets up a local Ethereum testnet - this should be good for any unix install
# 1. TODO Checks to see if Ethereum is installed (if not then install)
# 2. Creates a conf file for the genesis.json and password files, if they do not exist
# 3. Creates a node using Geth with a discrete data_dir and port set.

# Add some variables
# networkid
networkid=1973
# node_id - to differentiate between configured nodes within a private network cluster
node_id=0
# IPC port
ipc_port=30801
# RPC port
rpc_port=8901
# data_dir
data_dir=/tmp/$networkid/$node_id
# conf
conf=./conf

# Help
function usage {
    echo Usage:
    echo    testnet [param]
    echo params:
    echo    --create [node_id]: Creates a new testnet node. If within a cluster pass in a unique node_id - default is 0
    echo    --addacc : Creates a account on the node. The first account is the coinbase account.
    echo    --unlockacc [account_no] : Unlocks the account given TODO
    echo    --start : Starts the local test node TODO
    echo    --stop : Stops the local test node TODO
    echo    --attach : attaches to a running node
    echo    --minestart : starts the miner
    echo    --minestop : stops the miner
    echo    --clean : Cleans the installation back to base account
    echo    --help -h : This message
}
# Install Ethereum
function install {
    if [[ $OSTYPE == darwin* ]]; then # This is MacOS, so Brew
        echo Installing using brew
        brew tap ethereum/ethereum &&
        brew install ethereum
    elif [[ $OSTYPE == linux-gnu ]]; then # This is Ubuntu, so ...
        echo Installing using pkg-mgr
        sudo add-apt-repository ppa:ethereum/ethereum-qt &&
        sudo add-apt-repository ppa:ethereum/ethereum &&
        sudo add-apt-repository ppa:ethereum/ethereum-dev &&
        sudo apt-get update &&
        sudo apt-get install cpp-ethereum &&
        sudo apt-get install ethereum
    else # This is not supported
        echo Unsupported Operating system
        exit
    fi
}
function checkEthereum {

    if [ $which geth ] || [ $which eth ] != "" ]; then
        echo No current installation going to install - as root
        install
    else
        echo Already installed geth
    fi
}
# Configure
function configure {
    # Create the required directories and files if not there
    if [ "$(ls -A $conf 2>/dev/null)" ]; then
        echo $conf already exists, not creating
    else
        echo Creating the local conf directory and files to configure node
        mkdir $conf
        genesis_block='{
            "nonce": "0x0000000000000042",
            "mixhash": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "difficulty": "0x4000",
            "alloc": {},
            "coinbase": "0x0000000000000000000000000000000000000000",
            "timestamp": "0x00",
            "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "extraData": "Custom Ethereum Genesis Block for initiating a local test net",
            "gasLimit": "0xffffffff"
        }'
        echo $genesis_block > $conf/genesis_block.json
        echo 'testpwd-01' > conf/testnet-pwd
    fi
    if [ "$(ls -A $data_dir 2>/dev/null)" ]; then
        echo $data_dir already exists, not creating.
        echo If you want to re-create, run $0 --clean
    else
        echo Creating the node data_dir at $data_dir
        mkdir -p $data_dir
    fi
}
# Create
function create {
    echo checking that Ethereum is installed
    #checkEthereum
    configure
    # Create the genesis block json and password file in conf
    if [ -z "$2" ]; then
        echo No node_id passed in, using default - $node_id;
    else
        node_id=$2
        echo New node will be created: $node_id
        ipc_port=$ipc_port+$node_id
        rpc_port=$rpc_port+$node_id
    fi

    echo Creating local testnet...
    geth --genesis $conf/genesis_block.json --datadir $data_dir --networkid $networkid --port $ipc_port --rpcport $rpc_port --nodiscover 2>> $data_dir/eth.log &
    echo Done. Geth should now be running. See $data_dir/eth.log for details
}
# Start node
function start {
    echo NOT IMPLEMENTED
}
# Stop node
function stop {
    echo NOT IMPLEMENTED
}
# Attach
function attach {
    echo attaching to ipc endpoint $data_dir/geth.ipc
    geth attach ipc:$data_dir/geth.ipc
}
# Add account
function addacc {
    echo Adding account...
    geth --datadir $data_dir --networkid $networkid --port $ipc_port --rpcport $rpc_port --password $conf/testnet-pwd account new
}
# Starts the miner on the designated node
function startmining {
    echo starting the miner on this node: $networkid:$ipc_port
    echo NOT IMPLEMENTED
}
# Stop the miner on the designated node
function stopmining {
    echo stopping the miner on this node: $networkid:$ipc_port
    echo NOT IMPLEMENTED
}
# Unlock account
function unlockacc {
    if [ -z "$2" ]; then
        echo No account passed in, exiting;
        exit
    else
        echo unlocking $2
        echo NOT IMPLEMENTED
        # geth --password ./conf/testnet-pwd --unlock $2  --networkid 1973 --port 30801 --rpcport 8901
    fi
}
# Clean
function clean {
    rm -rf $data_dir
}
if [ -z "$1" ]; then
    usage
    exit
fi
if [[ "$1" == "--create" ]]; then
    create;
elif [[ "$1" == "--addacc" ]]; then
    addacc;
elif [[ "$1" == "--unlockacc" ]]; then
    unlockacc;
elif [[ "$1" == "--start" ]]; then
    start;
elif [[ "$1" == "--stop" ]]; then
    stop;
elif [[ "$1" == "--attach" ]]; then
    attach;
elif [[ "$1" == "--minestart" ]]; then
    startmining;
elif [[ "$1" == "--minestop" ]]; then
    stopmining;
elif [[ "$1" == "--clean" ]]; then
    clean;
elif [[ "$1" == "--help" ]]; then
    usage;
elif [[ "$1" == "-h" ]]; then
    usage;
else
        echo Unknown command.
        usage;
fi
